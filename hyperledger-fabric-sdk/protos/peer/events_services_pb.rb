# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: peer/events.proto for package 'protos'
# Original file comments:
#
# Copyright IBM Corp. 2016 All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'peer/events_pb'

module Protos
  module Events
    # Interface exported by the events server
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'protos.Events'

      # event chatting using Event
      rpc :Chat, stream(SignedEvent), stream(Event)
    end

    Stub = Service.rpc_stub_class
  end
  module Deliver
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'protos.Deliver'

      # deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message,
      # then a stream of block replies is received.
      rpc :Deliver, stream(Common::Envelope), stream(DeliverResponse)
      # deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message,
      # then a stream of **filtered** block replies is received.
      rpc :DeliverFiltered, stream(Common::Envelope), stream(DeliverResponse)
    end

    Stub = Service.rpc_stub_class
  end
end
